{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "Appends yes/no based on flag f": {
  "prefix": "flag",
  "body": [
    "if f:",
    "    output_list += ['YES']",
    "else:",
    "    output_list += ['NO']"
  ],
  "description": ""
},
  "Matrix transpose": {
  "prefix": "trans",
  "body": [
    "res = [[a[j][i] for j in range(len(a))] for i in range(len(a[0]))] #transpose of matrix"
  ],
  "description": ""
},
"Basic Py template without Test Cases": {
  "prefix": "cp",
  "body": [
    "'''",
    "    Author: Sarvajnya Pujari",
    "    Language: PyPy3",
    "    GitHub: https://github.com/sarvajnya",
    "'''",
    "",
    "def main():",
    "    $0",   
    
    "",
    "#Header_Files   ",
    "import os",
    "import sys",
    "from io import BytesIO, IOBase",
    "",
    "import random",
    "import os",
    "",
    "from bisect import *",
    "from typing import *",
    "from collections import *",
    "from copy import *",
    "from functools import *",
    "from heapq import *",
    "from itertools import *",
    "from string import *",
    "import math",
    
    "mod = 1e9+7",
    "def input(): return sys.stdin.readline().strip()",
    "",
    "",
    "BUFSIZE = 4096",
    "",
    "",
    "#Fast IO using PyRival",
    "",
    "RANDOM = random.randrange(2**62)",
    "",
    "",
    "def Wrapper(x):",
    "  return x ^ RANDOM",
    "",
    "class FastIO(IOBase):",
    "    newlines = 0",
    "",
    "    def __init__(self, file):",
    "        self._fd = file.fileno()",
    "        self.buffer = BytesIO()",
    "        self.writable = \"x\" in file.mode or \"r\" not in file.mode",
    "        self.write = self.buffer.write if self.writable else None",
    "",
    "    def read(self):",
    "        while True:",
    "            b = os.read(self._fd, max(",
    "                os.fstat(self._fd).st_size, BUFSIZE))",
    "            if not b:",
    "                break",
    "            ptr = self.buffer.tell()",
    "            self.buffer.seek(0, 2), self.buffer.write(",
    "                b), self.buffer.seek(ptr)",
    "        self.newlines = 0",
    "        return self.buffer.read()",
    "",
    "    def readline(self):",
    "        while self.newlines == 0:",
    "            b = os.read(self._fd, max(",
    "                os.fstat(self._fd).st_size, BUFSIZE))",
    "            self.newlines = b.count(b\"\\n\") + (not b)",
    "            ptr = self.buffer.tell()",
    "            self.buffer.seek(0, 2), self.buffer.write(",
    "                b), self.buffer.seek(ptr)",
    "        self.newlines -= 1",
    "        return self.buffer.readline()",
    "",
    "    def flush(self):",
    "        if self.writable:",
    "            os.write(self._fd, self.buffer.getvalue())",
    "            self.buffer.truncate(0), self.buffer.seek(0)",
    "",
    "",
    "class IOWrapper(IOBase):",
    "    def __init__(self, file):",
    "        self.buffer = FastIO(file)",
    "        self.flush = self.buffer.flush",
    "        self.writable = self.buffer.writable",
    "        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))",
    "        self.read = lambda: self.buffer.read().decode(\"ascii\")",
    "        self.readline = lambda: self.buffer.readline().decode(\"ascii\")",
    "",
    "",
    "sys.stdout = IOWrapper(sys.stdout)",
    "",
    "",
    "def print(*args, end='\\n', sep=''):",
    "    for i in args:",
    "        sys.stdout.write(str(i))",
    "        sys.stdout.write(sep)",
    "    sys.stdout.write(end)",
    "",
    "",
    "def si(types=None):",
    "    if not types:",
    "        return int(input().strip())",
    "    return int(types)",
    "",
    "",
    "def sf(types=None):",
    "    if not types:",
    "        return float(input().strip())",
    "    return float(types)",
    "",
    "",
    "def ss(types=None):",
    "    if not types:",
    "        return input().strip()",
    "    return str(types)",
    "",
    "",
    "def li(types=None):",
    "    if not types:",
    "        return list(map(int, input().strip().split()))",
    "    return list(map(int, str(types)))",
    "",
    "",
    "def mi(types):",
    "    return map(int, str(types))",
    "",
    "",
    "def ms(types):",
    "    return map(str, str(types))",
    "",
    "",
    "def mf(types):",
    "    return map(float, str(types))",
    "",
    "",
    "def lf(types=None):",
    "    if not types:",
    "        return list(map(float, input().strip().split()))",
    "    return list(map(float, str(types)))",
    "",
    "",
    "def ls(types=None):",
    "    if not types:",
    "        return list(input().strip().split())",
    "    return list(map(str, str(types)))",
    
    "if __name__ == '__main__':",
    "    main()"
  ],   
  "description": ""
},

	"Basic Py template with Test Cases": {
  "prefix": "cpt",
  "body": [
    "'''",
    "    Author: Sarvajnya Pujari",
    "    Language: PyPy3",
    "    GitHub: https://github.com/sarvajnya",
    "'''",
    "",
    "def main():",
    "    t = si()",
    "    output_list = []",
    "    for _ in range(t):",
    "        $0",
    "    print('\\n'.join(map(str, output_list)).strip())",
    "    pass",
    "",
    "#Header_Files   ",
    "import os",
    "import sys",
    "from io import BytesIO, IOBase",
    "",
    "import random",
    "import os",
    "",
    "from bisect import *",
    "from typing import *",
    "from collections import *",
    "from copy import *",
    "from functools import *",
    "from heapq import *",
    "from itertools import *",
    "from string import *",
    "import math",
    
    "mod = 1e9+7",
    "def input(): return sys.stdin.readline().strip()",
    "",
    "",
    "BUFSIZE = 4096",
    "",
    "",
    "#Fast IO using PyRival",
    "",
    "RANDOM = random.randrange(2**62)",
    "",
    "",
    "def Wrapper(x):",
    "  return x ^ RANDOM",
    "",
    "class FastIO(IOBase):",
    "    newlines = 0",
    "",
    "    def __init__(self, file):",
    "        self._fd = file.fileno()",
    "        self.buffer = BytesIO()",
    "        self.writable = \"x\" in file.mode or \"r\" not in file.mode",
    "        self.write = self.buffer.write if self.writable else None",
    "",
    "    def read(self):",
    "        while True:",
    "            b = os.read(self._fd, max(",
    "                os.fstat(self._fd).st_size, BUFSIZE))",
    "            if not b:",
    "                break",
    "            ptr = self.buffer.tell()",
    "            self.buffer.seek(0, 2), self.buffer.write(",
    "                b), self.buffer.seek(ptr)",
    "        self.newlines = 0",
    "        return self.buffer.read()",
    "",
    "    def readline(self):",
    "        while self.newlines == 0:",
    "            b = os.read(self._fd, max(",
    "                os.fstat(self._fd).st_size, BUFSIZE))",
    "            self.newlines = b.count(b\"\\n\") + (not b)",
    "            ptr = self.buffer.tell()",
    "            self.buffer.seek(0, 2), self.buffer.write(",
    "                b), self.buffer.seek(ptr)",
    "        self.newlines -= 1",
    "        return self.buffer.readline()",
    "",
    "    def flush(self):",
    "        if self.writable:",
    "            os.write(self._fd, self.buffer.getvalue())",
    "            self.buffer.truncate(0), self.buffer.seek(0)",
    "",
    "",
    "class IOWrapper(IOBase):",
    "    def __init__(self, file):",
    "        self.buffer = FastIO(file)",
    "        self.flush = self.buffer.flush",
    "        self.writable = self.buffer.writable",
    "        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))",
    "        self.read = lambda: self.buffer.read().decode(\"ascii\")",
    "        self.readline = lambda: self.buffer.readline().decode(\"ascii\")",
    "",
    "",
    "sys.stdout = IOWrapper(sys.stdout)",
    "",
    "",
    "def print(*args, end='\\n', sep=''):",
    "    for i in args:",
    "        sys.stdout.write(str(i))",
    "        sys.stdout.write(sep)",
    "    sys.stdout.write(end)",
    "",
    "",
    "def si(types=None):",
    "    if not types:",
    "        return int(input().strip())",
    "    return int(types)",
    "",
    "",
    "def sf(types=None):",
    "    if not types:",
    "        return float(input().strip())",
    "    return float(types)",
    "",
    "",
    "def ss(types=None):",
    "    if not types:",
    "        return input().strip()",
    "    return str(types)",
    "",
    "",
    "def li(types=None):",
    "    if not types:",
    "        return list(map(int, input().strip().split()))",
    "    return list(map(int, str(types)))",
    "",
    "",
    "def mi(types):",
    "    return map(int, str(types))",
    "",
    "",
    "def ms(types):",
    "    return map(str, str(types))",
    "",
    "",
    "def mf(types):",
    "    return map(float, str(types))",
    "",
    "",
    "def lf(types=None):",
    "    if not types:",
    "        return list(map(float, input().strip().split()))",
    "    return list(map(float, str(types)))",
    "",
    "",
    "def ls(types=None):",
    "    if not types:",
    "        return list(input().strip().split())",
    "    return list(map(str, str(types)))",
    
    "if __name__ == '__main__':",
    "    main()"
  ],   
  "description": ""
},

"Efficient power": {
  "prefix": "power",
  "body": [
    "def power(a, b, m=int(1e9+7)):",
    "    '''to return a^b%m in O(logn) time'''",
    "    res = 1",
    "    a %= m",
    "    while b:",
    "        if b % 2 == 1:",
    "            res = (res*a) % m",
    "        a = (a*a) % m",
    "        b = b // 2",
    "    return res % m"
  ],
  "description": ""
}
}
